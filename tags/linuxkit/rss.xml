<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>mort’s mythopœia - linuxkit</title>
      <link>https://mort.io</link>
      <description>with apologies</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://mort.io/tags/linuxkit/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Fri, 02 Jun 2017 00:00:00 +0000</lastBuildDate>
      <item>
          <title>ARMing LinuxKit</title>
          <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
          <author>Richard Mortier</author>
          <link>https://mort.io/blog/arming-linuxkit/</link>
          <guid>https://mort.io/blog/arming-linuxkit/</guid>
          <description xml:base="https://mort.io/blog/arming-linuxkit/">&lt;p&gt;As some may know, following the &lt;a href=&quot;https:&#x2F;&#x2F;unikernels.com&quot;&gt;Unikernel Systems&lt;&#x2F;a&gt; acquisition, I
currently do contract work for &lt;a href=&quot;https:&#x2F;&#x2F;docker.com&quot;&gt;Docker Inc.&lt;&#x2F;a&gt; in addition to my day job
here at the &lt;a href=&quot;https:&#x2F;&#x2F;www.cl.cam.ac.uk&quot;&gt;Cambridge University Computer Laboratory&lt;&#x2F;a&gt;. Recently this has
centred on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linuxkit&#x2F;linuxkit&quot;&gt;LinuxKit&lt;&#x2F;a&gt;, “&lt;em&gt;A toolkit for building secure, portable and lean
operating systems for containers&lt;&#x2F;em&gt;” and, specifically, enabling ARM64 support.
I’m pleased to say that a basic proof-of-concept is now complete, and we’re
working towards getting support merged upstream.&lt;&#x2F;p&gt;
&lt;p&gt;The proof-of-concept was developed using the great ARM64 support provided
by &lt;a href=&quot;https:&#x2F;&#x2F;packet.net&quot;&gt;&lt;code&gt;packet.net&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, on one of their &lt;code&gt;type 2A&lt;&#x2F;code&gt; boxes.&lt;&#x2F;p&gt;
&lt;p&gt;If you fancy trying it out, then hopefully the following instructions will be of
use – or just bug me on the &lt;a href=&quot;https:&#x2F;&#x2F;slack.packet.net&#x2F;&quot;&gt;&lt;code&gt;packet.net&lt;&#x2F;code&gt; Slack&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building&quot; aria-label=&quot;Anchor link for: building&quot;&gt;Building&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Start by getting an ARM64 box setup. If you have one to hand, great! If not, you
could head over to &lt;a href=&quot;https:&#x2F;&#x2F;packet.net&quot;&gt;packet.net&lt;&#x2F;a&gt; and create type 2A Ubuntu box to use as a build
environment.&lt;&#x2F;p&gt;
&lt;p&gt;Then clone the source, either &lt;code&gt;git clone&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mor1&#x2F;linuxkit&#x2F;tree&#x2F;project-arm64&quot;&gt;my dev branch&lt;&#x2F;a&gt;, or
see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linuxkit&#x2F;linuxkit&#x2F;pull&#x2F;1654&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;linuxkit&#x2F;linuxkit&#x2F;pull&#x2F;1654&lt;&#x2F;a&gt; for the open PR which may
be a bit more stable.&lt;&#x2F;p&gt;
&lt;p&gt;The essence of it then is to build the containers based off &lt;code&gt;aarch64&#x2F;alpine&lt;&#x2F;code&gt;,
along with an ARM64 version of the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;moby&quot;&gt;&lt;code&gt;moby&lt;&#x2F;code&gt; CLI&lt;&#x2F;a&gt; if needed. Specifying the
container images you just built in your &lt;code&gt;moby.yml&lt;&#x2F;code&gt; file will then cause &lt;code&gt;moby&lt;&#x2F;code&gt;
to assemble things that should boot on ARM64.&lt;&#x2F;p&gt;
&lt;p&gt;The output should be a gzipped kernel, currently slightly misleadingly named
&lt;code&gt;bzImage&lt;&#x2F;code&gt; as well as a suitable &lt;code&gt;initrd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;booting&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#booting&quot; aria-label=&quot;Anchor link for: booting&quot;&gt;Booting&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Setup another ARM64 box on which to boot the results. You could setup a
type 2A &lt;a href=&quot;https:&#x2F;&#x2F;packet.net&quot;&gt;packet.net&lt;&#x2F;a&gt; box once more, but this  time set it to &lt;em&gt;custom OS&lt;&#x2F;em&gt; and
&lt;em&gt;iPXE boot&lt;&#x2F;em&gt;. For the iPXE boot URL, give a URL pointing to a suitable boot
file. I use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!ipxe&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-set z-shell&quot;&gt;set&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; base-url URL-TO-DIRECTORY-HOLDING-IMAGES&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-set z-shell&quot;&gt;set&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; kernel-params ip=dhcp nomodeset ro serial console=ttyAMA0,115200 earlycon earlyprintk=serial,keep initrd=arm64-initrd.img&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;initrd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;base&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;-&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;url&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;arm64-initrd.img&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;imgstat&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;boot&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;base&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;-&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;url&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;arm64-bzImage &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;kernel&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;-&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;params&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that, currently at least, the &lt;a href=&quot;https:&#x2F;&#x2F;packet.net&quot;&gt;packet.net&lt;&#x2F;a&gt; iPXE boot only occurs on the
first boot as it is assumed that the iPXE boot will install a working image to
the local disk. Thus, if it doesn’t work first time, get an SOS console and
break in by hitting &lt;code&gt;^B&lt;&#x2F;code&gt; at the appropriate moment, before issuing &lt;code&gt;chain URL&lt;&#x2F;code&gt;
where &lt;code&gt;URL&lt;&#x2F;code&gt; points to your iPXE boot file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;Conclusion&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This just does the barest minimum for now – I did say it was a
proof-of-concept… :) Work is currently ongoing to upstream this rather than
developing this PoC further, but if anyone has a particular interest or would
like to provide patches to, e.g., support network devices on &lt;a href=&quot;https:&#x2F;&#x2F;packet.net&quot;&gt;packet.net&lt;&#x2F;a&gt;,
please &lt;a href=&quot;mailto:mort@cantab.net&quot;&gt;get in touch&lt;&#x2F;a&gt;, file an issue or send a pull
request!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Building Up Your ARMs</title>
          <pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate>
          <author>Richard Mortier</author>
          <link>https://mort.io/blog/building-up-your-arms/</link>
          <guid>https://mort.io/blog/building-up-your-arms/</guid>
          <description xml:base="https://mort.io/blog/building-up-your-arms/">&lt;p&gt;Due to the impending finish of the EU FP7 funded &lt;a href=&quot;https:&#x2F;&#x2F;usercentricnetworking.eu&quot;&gt;User Centric
Networking&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; I recently had cause to revisit the excellent work that
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;talex5&quot;&gt;Thomas Leonard&lt;&#x2F;a&gt; did for the project in getting Xen&#x2F;ARM running on the
&lt;a href=&quot;http:&#x2F;&#x2F;cubieboard.org&#x2F;model&#x2F;cb2&#x2F;&quot;&gt;Cubieboard2&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;cubieboard.org&#x2F;model&#x2F;cb3&#x2F;&quot;&gt;Cubietruck&lt;&#x2F;a&gt; (aka &lt;a href=&quot;http:&#x2F;&#x2F;cubieboard.org&#x2F;model&#x2F;cb3&#x2F;&quot;&gt;Cubieboard3&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The resulting repo, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder&quot;&gt;mirage&#x2F;xen-arm-builder&lt;&#x2F;a&gt;, had languished for several
months and the past SD card images had some problems and had been allowed to
drop off the ’Net as a result. However, sterling work by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ijc25&quot;&gt;Ian Campbell&lt;&#x2F;a&gt; at
a recent Mirage &lt;a href=&quot;https:&#x2F;&#x2F;mirage.io&#x2F;blog&#x2F;2016-summer-hackathon-roundup&quot;&gt;hackathon&lt;&#x2F;a&gt; had started to resurrect this work based on
the &lt;a href=&quot;https:&#x2F;&#x2F;alpinelinux.org&#x2F;&quot;&gt;Alpine Linux&lt;&#x2F;a&gt; distribution. This seemed a promising place to start,
so I did :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-an-image&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-an-image&quot; aria-label=&quot;Anchor link for: building-an-image&quot;&gt;Building an Image&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The end result was an enormous &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder&#x2F;pull&#x2F;71&quot;&gt;pull request&lt;&#x2F;a&gt; that splatted a Brave New
World on top of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;talex5&quot;&gt;Thomas’&lt;&#x2F;a&gt; work.
The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;&lt;code&gt;README&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
is hopefully reasonably self-explanatory but in summary,&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone the repo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; clone https:&#x2F;&#x2F;github.com&#x2F;mor1&#x2F;arm-image-builder.git&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; arm-image-builder&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;make&lt;&#x2F;code&gt; targets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;make&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; all       &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; runs `make prepare build image`&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; make prepare # clones repos, pulls tarballs&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; make build   # use Docker to build the `linux&#x2F;` and `u-boot&#x2F;` trees&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; make image   # finally, create the on-disk `sdcard.img`&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This clones the necessary repos (Linux, u-boot), builds them, and then puts
together the image file &lt;code&gt;sdcard.img&lt;&#x2F;code&gt; in the current directory. If on OSX, &lt;code&gt;make sdcard&lt;&#x2F;code&gt; will then attempt to write that to a blank, mounted SD card. This does a
rather hacky auto-discovery of where the SD card might be mounted; if in doubt,
and in any case, always safer to simply&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;MNT&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;the-correct-mount-point&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;make&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sdcard&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…or simply use your favourite tools to write the &lt;code&gt;sdcard.img&lt;&#x2F;code&gt; file to your SD
card.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-the-image&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-the-image&quot; aria-label=&quot;Anchor link for: using-the-image&quot;&gt;Using the Image&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The end result should be an SD card that you can use to boot your device into
&lt;a href=&quot;https:&#x2F;&#x2F;alpinelinux.org&#x2F;&quot;&gt;Alpine Linux v3.4&lt;&#x2F;a&gt;. At present, completing installation requires then:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder#first-boot--re-initialisation&quot;&gt;resetting the environment&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder#base-install&quot;&gt;completing Alpine setup&lt;&#x2F;a&gt; via
the &lt;code&gt;setup-alpine&lt;&#x2F;code&gt; script,&lt;&#x2F;li&gt;
&lt;li&gt;(if desired) installing Xen via the
&lt;code&gt;&#x2F;media&#x2F;mmcblk0p1&#x2F;alpine-dom0-install.sh&lt;&#x2F;code&gt; script created as part of building
the SD card image,&lt;&#x2F;li&gt;
&lt;li&gt;(if desired) finally,
building &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder#alpine&quot;&gt;Alpine&lt;&#x2F;a&gt;
and&#x2F;or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;xen-arm-builder#debian&quot;&gt;Debian&lt;&#x2F;a&gt; &lt;code&gt;domU&lt;&#x2F;code&gt;s
via the &lt;code&gt;&#x2F;media&#x2F;mmcblk0p1&#x2F;alpine-domU-install.sh&lt;&#x2F;code&gt; and
&lt;code&gt;&#x2F;media&#x2F;mmcblk0p1&#x2F;debian-domU-install.sh&lt;&#x2F;code&gt; scripts, also created as part of
building the image.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hopefully the net result is you end up with a Cubieboard2&#x2F;3 running Xen with an
Alpine Linux &lt;code&gt;dom0&lt;&#x2F;code&gt; and some &lt;code&gt;domU&lt;&#x2F;code&gt; images available.&lt;&#x2F;p&gt;
&lt;p&gt;As ever, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mort___&quot;&gt;comments, patches, pull requests welcome&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Grant No. 611001 for those who care.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
      </item>
    </channel>
</rss>
